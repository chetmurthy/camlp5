#use "../local-install/lib/ocaml/topfind.camlp5";;
#require "compiler-libs.common" ;;
#require "ounit2";;
#require "fmt";;
#require "rresult";;
#require "pcre";;
#require "bos";;

let pp_char_stream strm =
  let l = Stream.npeek !Toploop.max_printer_depth strm in
  Fmt.(pf stdout "<strm<[%a]>>" (list char) l)
;;
#install_printer pp_char_stream ;;

let pp_token_stream strm =
  let l = Stream.npeek !Toploop.max_printer_depth strm in
  let rec trim_eoi = function
    ("EOI",_ as x)::_ -> [x]
  | h::t -> h::(trim_eoi t)
  | [] -> []
  in 
  Fmt.(pf stdout "<strm<[%a]>>" (list ~sep:comma (parens (pair ~sep:comma (quote string) (quote string)))) (trim_eoi l))
;;
#install_printer pp_token_stream ;;

#directory "../main";;

#directory "../lib2";;
#load "../lib2/gramlib2.cma";;

#load "alt_pa_o.cmo";;
#load "grammar_bug_test.cmo";;

open Alt_pa_o;;
Grammar.Entry.print Fmt.stdout Alt_pa_o.sig_item;;
Grammar.Entry.print Fmt.stdout Alt_pa_o.argle1;;
Grammar.Entry.print Fmt.stdout Alt_pa_o.argle2;;
